name: CI/CD Pipeline for quiz App

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      destroy:
        description: "Set to true to destroy resources."
        required: false
        default: "false"

permissions:
  contents: read
  pull-requests: write

env:
  TF_LOG: INFO
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  frontend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./quiz-app
    strategy:
      matrix:
        node-version: [20.x]
        architecture: [x64]
    steps:
      - name: Check-out git repository  
        uses: actions/checkout@v4

      - name: USE NODEJS ${{ matrix.node-version }} - ${{ matrix.architecture }}
        uses: actions/setup-node@v4

      - name: Install project dependencies 
        working-directory: ./quiz-app
        run: |
          npm i
          npm run lint
          npm install --save-dev --save-exact prettier
          npm run prettier
          npm test
        env:
          CI: true 

      - name: Build
        run: npm run build
        working-directory: ./quiz-app

        # Setup sonar-scanner
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}     

        
  backend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    strategy:
      matrix:
        node-version: [20.x]
        architecture: [x64]
    steps:
      - name: Check-out git repository  
        uses: actions/checkout@v4

      - name: USE NODEJS ${{ matrix.node-version }} - ${{ matrix.architecture }}
        uses: actions/setup-node@v4

      - name: Install project dependencies 
        working-directory: ./backend
        run: |
          npm i
          npm run lint
          npm install --save-dev --save-exact prettier
          npm run prettier
          npm test
        env:
          CI: true 

      # Setup sonar-scanner
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          

  frontend-security:
    needs: frontend-test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./quiz-app
    steps:
      - uses: actions/checkout@master
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true # To make sure that SARIF upload gets called
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          
      - name: Install Snyk CLI
        uses: snyk/actions/setup@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}  
        
      - name: Snyk Authenticate    
        run: snyk auth ${{ secrets.SNYK_TOKEN }}

      - name: Snyk Code Test
        run: snyk code test --all-projects
        continue-on-error: true

  backend-security:
    needs: backend-test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    steps:
      - uses: actions/checkout@master
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true # To make sure that SARIF upload gets called
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        
      - name: Install Snyk CLI
        uses: snyk/actions/setup@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          
      - name: Snyk Authenticate    
        run: snyk auth ${{ secrets.SNYK_TOKEN }}

      - name: Snyk Code Test
        run: snyk code test --all-projects
        continue-on-error: true

  frontend-image:
    needs: frontend-security
    runs-on: ubuntu-latest
    permissions:
      contents: read 
      security-events: write 
      actions: read
    steps:
    - uses: actions/checkout@v4
    
    - name: Build and push backend Docker image
      working-directory: ./quiz-app
      run: |
        docker build . -t ${{ secrets.DOCKER_USERNAME }}/frontend_quiz
        echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin 
        docker push ${{ secrets.DOCKER_USERNAME }}/frontend_quiz:latest   

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'docker.io/${{ secrets.DOCKER_USERNAME }}/frontend_quiz:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'

    - name: Install Snyk CLI
      uses: snyk/actions/setup@master
      env:
        snyk-token: ${{ secrets.SNYK_TOKEN }}
      
    - name: Snyk Authenticate    
      run: snyk auth ${{ secrets.SNYK_TOKEN }}
  
    - name: Snyk Container monitor
      run: snyk container monitor ${{ secrets.DOCKER_USERNAME }}/frontend_quiz:latest --file=Dockerfile   
      working-directory: ./quiz-app

    - name: Run Snyk to check for vulnerabilities in the Docker image
      uses: snyk/actions/docker@master
      with:
        image: ${{ secrets.DOCKER_USERNAME }}/frontend_quiz:latest
        args: --file=quiz-app/Dockerfile --severity-threshold=high
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      continue-on-error: true



  backend-image:
    needs: backend-security
    runs-on: ubuntu-latest
    permissions:
      contents: read 
      security-events: write 
      actions: read
    steps:
    - uses: actions/checkout@v4
    
    - name: Build and push backend Docker image
      working-directory: ./backend
      run: |
        docker build . -t ${{ secrets.DOCKER_USERNAME }}/backend_quiz:latest
        echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin 
        docker push ${{ secrets.DOCKER_USERNAME }}/backend_quiz:latest    

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'docker.io/${{ secrets.DOCKER_USERNAME }}/backend_quiz:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH' 
        
    - name: Install Snyk CLI
      uses: snyk/actions/setup@master
      env:
        snyk-token: ${{ secrets.SNYK_TOKEN }}
    
    - name: Snyk Authenticate    
      run: snyk auth ${{ secrets.SNYK_TOKEN }}

    - name: Snyk Container monitor
      run: snyk container monitor ${{ secrets.DOCKER_USERNAME }}/backend_quiz:latest --file=Dockerfile   
      working-directory: ./backend

    - name: Run Snyk to check for vulnerabilities in the Docker image
      uses: snyk/actions/docker@master
      with:
        image: ${{ secrets.DOCKER_USERNAME }}/backend_quiz:latest
        args: --file=backend/Dockerfile --severity-threshold=high
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      continue-on-error: true 

###########################################################################
  # Job : Provision Infrastructure Resources
  ###########################################################################        
  terraform-resources:
    name: Provision Resources
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
      - name: Git checkout
        uses: actions/checkout@v4.2.2

      - name: Configure AWS credentials from AWS account
        uses: aws-actions/configure-aws-credentials@v4.0.3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3.1.2

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        env:
          AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
          AWS_BUCKET_KEY_NAME: ${{ secrets.AWS_BUCKET_KEY_NAME }}
        run: terraform init -backend-config="bucket=${AWS_BUCKET_NAME}" -backend-config="key=${AWS_BUCKET_KEY_NAME}" -backend-config="region=${AWS_REGION}"

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        if: github.event_name == 'pull_request'
        continue-on-error: true

      - uses: actions/github-script@v7.0.1
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.MY_GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>
            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`
            </details>
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            </details>
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
            });

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && (github.event_name == 'push')
        run: terraform apply -auto-approve -input=false
  
  ###########################################################################
  # Job : Deploy the autoscaler on EKS
  ###########################################################################
  deploy_autoscaler:
    runs-on: ubuntu-latest
    needs: [terraform-resources]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    defaults:
      run:
        shell: bash
        working-directory: ./autoscaler
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Configure AWS credentials from AWS account
        uses: aws-actions/configure-aws-credentials@v4.0.3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install kubectl
        run: |
          sudo apt-get install kubectl -y

      - name: Update kubeconfig
        run: aws eks --region ${{ secrets.AWS_REGION }} update-kubeconfig --name eks-cluster

      - name: Wait for resources to be created
        run: sleep 30

      - name: Deploy to EKS Autoscaler
        run: |
          kubectl apply -f cluster-autoscaler.yaml

###########################################################################
  # Job 4: Send Notification Email (NEW)
  ###########################################################################
  notify:
    name: Send Notification Email
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test, frontend-security, backend-security, frontend-image, backend-image, terraform-resources, deploy_autoscaler]
    if: always()  # Ensure this job runs regardless of previous outcomes
    steps:
      # Step to determine overall pipeline status
      - name: Determine overall pipeline status
        id: pipeline-status
        run: |
          # Check if all required jobs succeeded
          if [[ "${{ needs.frontend-test.result }}" == "success" ]] \
          && [[ "${{ needs.backend-test.result }}" == "success" ]] \
          && [[ "${{ needs.frontend-security.result }}" == "success" ]] \
          && [[ "${{ needs.backend-security.result }}" == "success" ]] \
          && [[ "${{ needs.frontend-image.result }}" == "success" ]] \
          && [[ "${{ needs.backend-image.result }}" == "success" ]] \
          && [[ "${{ needs.terraform-resources.result }}" == "success" ]] \
          && [[ "${{ needs.deploy_autoscaler.result }}" == "success" ]]; then
            echo "result=Success ‚úÖ" >> $GITHUB_OUTPUT
          else
            echo "result=Failed ‚ùå" >> $GITHUB_OUTPUT
          fi

      # Step to send notification email
      - name: Send Email
        uses: hilarion5/send-mail@v1
        with:
          smtp-server: smtp.gmail.com
          smtp-port: 465
          smtp-secure: true
          from-email: ${{ secrets.MAIL_FROM }}
          to-email: ${{ secrets.MAIL_TO }} # Use a secret for the recipient email addresses
          username: ${{ secrets.MAIL_USERNAME }}
          password: ${{ secrets.MAIL_PASSWORD }}
          subject: "CI/CD Pipeline Notification: ${{ github.workflow }} - ${{ steps.pipeline-status.outputs.result }}"
          body: ""
          html: |
            <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; border: 1px solid #ddd; border-radius: 8px; background-color: #ffffff;">
              <h2 style="color: #24292e; text-align: center;">üöÄ CI/CD Pipeline Notification</h2>
      
              <div style="background-color: #f6f8fa; padding: 16px; border-radius: 6px;">
                <table style="width: 100%; border-collapse: collapse;">
                  <tr>
                    <td style="padding: 10px; border-bottom: 1px solid #ddd;"><strong>Workflow</strong></td>
                    <td style="padding: 10px; border-bottom: 1px solid #ddd;">${{ github.workflow }}</td>
                  </tr>
                  <tr>
                    <td style="padding: 10px; border-bottom: 1px solid #ddd;"><strong>Triggered by</strong></td>
                    <td style="padding: 10px; border-bottom: 1px solid #ddd;">${{ github.actor }}</td>
                  </tr>
                  <tr>
                    <td style="padding: 10px; border-bottom: 1px solid #ddd;"><strong>Repository</strong></td>
                    <td style="padding: 10px; border-bottom: 1px solid #ddd;">${{ github.repository }}</td>
                  </tr>
                  <tr>
                    <td style="padding: 10px; border-bottom: 1px solid #ddd;"><strong>Run Details</strong></td>
                    <td style="padding: 10px; border-bottom: 1px solid #ddd;">
                      <a href="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" style="color: #0366d6; text-decoration: none;">View Run #${{ github.run_id }}</a>
                    </td>
                  </tr>
                </table>
              </div>
      
              <h3 style="margin-top: 16px;">üõ† Job Statuses</h3>
              <table style="width: 100%; border-collapse: collapse; background-color: #fff;">
                <tr style="background-color: #f6f8fa;">
                  <th style="padding: 10px; text-align: left;">Job</th>
                  <th style="padding: 10px; text-align: center;">Status</th>
                </tr>
                <tr>
                  <td style="padding: 10px;">Docker Build</td>
                  <td style="padding: 10px; text-align: center; color: white; background-color: 
                    ${{ (needs.frontend-test.result == 'success' && '#28a745') || '#d73a49' }}; border-radius: 4px;">
                    ${{ needs.frontend-test.result }}
                  </td>
                </tr>
                <tr>
                  <td style="padding: 10px;">Backend Docker Build</td>
                  <td style="padding: 10px; text-align: center; color: white; background-color: 
                    ${{ (needs.backend-test.result == 'success' && '#28a745') || '#d73a49' }}; border-radius: 4px;">
                    ${{ needs.backend-test.result }}
                  </td>
                </tr>
                <tr>
                  <td style="padding: 10px;">Frontend Security</td>
                  <td style="padding: 10px; text-align: center; color: white; background-color: 
                    ${{ (needs.frontend-security.result == 'success' && '#28a745') || '#d73a49' }}; border-radius: 4px;">
                    ${{ needs.frontend-security.result }}
                  </td>
                </tr>
                <tr>
                  <td style="padding: 10px;">Backend Security</td>
                  <td style="padding: 10px; text-align: center; color: white; background-color: 
                    ${{ (needs.backend-security.result == 'success' && '#28a745') || '#d73a49' }}; border-radius: 4px;">
                    ${{ needs.backend-security.result }}
                  </td> 
                </tr>
                <tr>
                  <td style="padding: 10px;">Frontend Image</td>
                  <td style="padding: 10px; text-align: center; color: white; background-color: 
                    ${{ (needs.frontend-image.result == 'success' && '#28a745') || '#d73a49' }}; border-radius: 4px;">
                    ${{ needs.frontend-image.result }}
                  </td>
                </tr>
                <tr>
                  <td style="padding: 10px;">Backend Image</td>
                  <td style="padding: 10px; text-align: center; color: white; background-color: 
                    ${{ (needs.backend-image.result == 'success' && '#28a745') || '#d73a49' }}; border-radius: 4px;">
                    ${{ needs.backend-image.result }}
                  </td>
                </tr>
                
                <tr>
                  <td style="padding: 10px;">Terraform Resources</td>
                  <td style="padding: 10px; text-align: center; color: white; background-color: 
                    ${{ (needs.terraform-resources.result == 'success' && '#28a745') || '#d73a49' }}; border-radius: 4px;">
                    ${{ needs.terraform-resources.result }}
                  </td>
                </tr>
                <tr>
                  <td style="padding: 10px;">Deploy Autoscaler</td>
                  <td style="padding: 10px; text-align: center; color: white; background-color: 
                    ${{ (needs.deploy_autoscaler.result == 'success' && '#28a745') || '#d73a49' }}; border-radius: 4px;">
                    ${{ needs.deploy_autoscaler.result }}
                  </td>
                </tr>
              </table>
      
              <p style="color: #6a737d; font-size: 0.9em; margin-top: 20px; text-align: center;">
                This email was sent automatically by <strong>GitHub Actions</strong>.
              </p>
            </div>